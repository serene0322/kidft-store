{"ast":null,"code":"import ShopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n});\nexport const fetchProductStart = productID => ({\n  type: ShopActionTypes.FETCH_PRODUCT_START,\n  payload: productID\n});\nexport const setProduct = product => ({\n  type: ShopActionTypes.SET_PRODUCT,\n  payload: product\n});\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart());\n    collectionRef.get().then(async snapshot => {\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionsMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/react-course/kidft-store/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchProductStart","productID","FETCH_PRODUCT_START","setProduct","product","SET_PRODUCT","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C;AAKP,OAAO,MAAME,iBAAiB,GAAGC,SAAS,KAAK;AAC3CV,EAAAA,IAAI,EAAEJ,eAAe,CAACe,mBADqB;AAE3CN,EAAAA,OAAO,EAAEK;AAFkC,CAAL,CAAnC;AAKP,OAAO,MAAME,UAAU,GAAGC,OAAO,KAAK;AAClCb,EAAAA,IAAI,EAAEJ,eAAe,CAACkB,WADY;AAElCT,EAAAA,OAAO,EAAEQ;AAFyB,CAAL,CAA1B;AAKP,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf,UAAMC,aAAa,GAAGpB,SAAS,CAACqB,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACjB,qBAAqB,EAAtB,CAAR;AAEAkB,IAAAA,aAAa,CACRE,GADL,GAEKC,IAFL,CAEU,MAAMC,QAAN,IAAkB;AACpB,YAAMlB,cAAc,GAAGL,+BAA+B,CAACuB,QAAD,CAAtD;AACAL,MAAAA,QAAQ,CAACd,uBAAuB,CAACC,cAAD,CAAxB,CAAR;AACH,KALL,EAMKmB,KANL,CAMWC,KAAK,IAAIP,QAAQ,CAACV,uBAAuB,CAACiB,KAAK,CAACC,OAAP,CAAxB,CAN5B;AAOH,GAXD;AAYH,CAbM","sourcesContent":["import ShopActionTypes from \"./shop.types\";\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\r\n});\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\nexport const fetchProductStart = productID => ({\r\n    type: ShopActionTypes.FETCH_PRODUCT_START,\r\n    payload: productID\r\n});\r\n\r\nexport const setProduct = product => ({\r\n    type: ShopActionTypes.SET_PRODUCT,\r\n    payload: product\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n        const collectionRef = firestore.collection('collections');\r\n        dispatch(fetchCollectionsStart());\r\n\r\n        collectionRef\r\n            .get()\r\n            .then(async snapshot => {\r\n                const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n                dispatch(fetchCollectionsSuccess(collectionsMap));\r\n            })\r\n            .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}