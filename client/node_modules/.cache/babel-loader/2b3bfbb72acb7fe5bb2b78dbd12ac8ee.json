{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react-course\\\\kidft-store\\\\src\\\\context\\\\VideoState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport VideoContext from \"./VideoContext\";\nimport { io } from \"socket.io-client\"; //provide communication between client and server\n\nimport Peer from \"simple-peer\";\nimport { message } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst URL = \"http://localhost:5000/\"; //const URL = \"https://fathomless-tundra-67025.herokuapp.com/\";\n// const SERVER_URL = \"http://localhost:5000/\";\n\nexport const socket = io(URL);\n\nconst VideoState = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [chat, setChat] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState(\"\");\n  const [userName, setUserName] = useState(\"\");\n  const [otherUser, setOtherUser] = useState(\"\");\n  const [myVdoStatus, setMyVdoStatus] = useState(true);\n  const [userVdoStatus, setUserVdoStatus] = useState();\n  const [myMicStatus, setMyMicStatus] = useState(true);\n  const [userMicStatus, setUserMicStatus] = useState();\n  const [msgRcv, setMsgRcv] = useState(\"\");\n  const [screenShare, setScreenShare] = useState(false);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  const screenTrackRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n      myVideo.current.srcObject = currentStream;\n    });\n\n    if (localStorage.getItem(\"name\")) {\n      setName(localStorage.getItem(\"name\"));\n    }\n\n    socket.on(\"me\", id => setMe(id));\n    socket.on(\"endCall\", () => {\n      window.location.reload();\n    });\n    socket.on(\"updateUserMedia\", _ref2 => {\n      let {\n        type,\n        currentMediaStatus\n      } = _ref2;\n\n      if (currentMediaStatus !== null || currentMediaStatus !== []) {\n        switch (type) {\n          case \"video\":\n            setUserVdoStatus(currentMediaStatus);\n            break;\n\n          case \"mic\":\n            setUserMicStatus(currentMediaStatus);\n            break;\n\n          default:\n            setUserMicStatus(currentMediaStatus[0]);\n            setUserVdoStatus(currentMediaStatus[1]);\n            break;\n        }\n      }\n    });\n    socket.on(\"callUser\", _ref3 => {\n      let {\n        from,\n        name: callerName,\n        signal\n      } = _ref3;\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    socket.on(\"msgRcv\", _ref4 => {\n      let {\n        name,\n        msg: value,\n        sender\n      } = _ref4;\n      setMsgRcv({\n        value,\n        sender\n      });\n      setTimeout(() => {\n        setMsgRcv({});\n      }, 2000);\n    });\n  }, []); // useEffect(() => {\n  //   console.log(chat);\n  // }, [chat]);\n\n  const answerCall = () => {\n    setCallAccepted(true);\n    setOtherUser(call.from);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on(\"signal\", data => {\n      socket.emit(\"answerCall\", {\n        signal: data,\n        to: call.from,\n        userName: name,\n        type: \"both\",\n        myMediaStatus: [myMicStatus, myVdoStatus]\n      });\n    });\n    peer.on(\"stream\", currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n    console.log(connectionRef.current);\n  };\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    setOtherUser(id);\n    peer.on(\"signal\", data => {\n      socket.emit(\"callUser\", {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on(\"stream\", currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on(\"callAccepted\", _ref5 => {\n      let {\n        signal,\n        userName\n      } = _ref5;\n      setCallAccepted(true);\n      setUserName(userName);\n      peer.signal(signal);\n      socket.emit(\"updateMyMedia\", {\n        type: \"both\",\n        currentMediaStatus: [myMicStatus, myVdoStatus]\n      });\n    });\n    connectionRef.current = peer;\n    console.log(connectionRef.current);\n  };\n\n  const updateVideo = () => {\n    setMyVdoStatus(currentStatus => {\n      socket.emit(\"updateMyMedia\", {\n        type: \"video\",\n        currentMediaStatus: !currentStatus\n      });\n      stream.getVideoTracks()[0].enabled = !currentStatus;\n      return !currentStatus;\n    });\n  };\n\n  const updateMic = () => {\n    setMyMicStatus(currentStatus => {\n      socket.emit(\"updateMyMedia\", {\n        type: \"mic\",\n        currentMediaStatus: !currentStatus\n      });\n      stream.getAudioTracks()[0].enabled = !currentStatus;\n      return !currentStatus;\n    });\n  }; //Share screen function to let customer share the product they want to seller\n\n\n  const handleScreenSharing = () => {\n    if (!myVdoStatus) {\n      message.error(\"Turn on your video to share the content\", 2);\n      return;\n    }\n\n    if (!screenShare) {\n      navigator.mediaDevices.getDisplayMedia({\n        cursor: true\n      }).then(currentStream => {\n        const screenTrack = currentStream.getTracks()[0]; // replaceTrack (oldTrack, newTrack, oldStream);\n\n        connectionRef.current.replaceTrack(connectionRef.current.streams[0].getTracks().find(track => track.kind === 'video'), screenTrack, stream); // Listen click end\n\n        screenTrack.onended = () => {\n          connectionRef.current.replaceTrack(screenTrack, connectionRef.current.streams[0].getTracks().find(track => track.kind === 'video'), stream);\n          myVideo.current.srcObject = stream;\n          setScreenShare(false);\n        };\n\n        myVideo.current.srcObject = currentStream;\n        screenTrackRef.current = screenTrack;\n        setScreenShare(true);\n      }).catch(error => {\n        console.log(\"No stream for sharing\");\n      });\n    } else {\n      screenTrackRef.current.onended();\n    }\n  }; //full screen\n\n\n  const fullScreen = e => {\n    const elem = e.target;\n\n    if (elem.requestFullscreen) {\n      elem.requestFullscreen();\n    } else if (elem.mozRequestFullScreen) {\n      /* Firefox */\n      elem.mozRequestFullScreen();\n    } else if (elem.webkitRequestFullscreen) {\n      /* Chrome, Safari & Opera */\n      elem.webkitRequestFullscreen();\n    } else if (elem.msRequestFullscreen) {\n      /* IE/Edge */\n      elem.msRequestFullscreen();\n    }\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    socket.emit(\"endCall\", {\n      id: otherUser\n    });\n    window.location.reload();\n  };\n\n  const leaveCall1 = () => {\n    socket.emit(\"endCall\", {\n      id: otherUser\n    });\n  };\n\n  const sendMsg = value => {\n    socket.emit(\"msgUser\", {\n      name,\n      to: otherUser,\n      msg: value,\n      sender: name\n    });\n    let msg = {};\n    msg.msg = value;\n    msg.type = \"sent\";\n    msg.timestamp = Date.now();\n    msg.sender = name;\n    setChat([...chat, msg]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(VideoContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      sendMsg,\n      msgRcv,\n      chat,\n      setChat,\n      setMsgRcv,\n      setOtherUser,\n      leaveCall1,\n      userName,\n      myVdoStatus,\n      setMyVdoStatus,\n      userVdoStatus,\n      setUserVdoStatus,\n      updateVideo,\n      myMicStatus,\n      userMicStatus,\n      updateMic,\n      screenShare,\n      handleScreenSharing,\n      fullScreen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VideoState, \"NJuzy6W/NhwQmY3sf2GHoDSxYyo=\");\n\n_c = VideoState;\nexport default VideoState;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoState\");","map":{"version":3,"sources":["C:/Users/user/Desktop/react-course/kidft-store/src/context/VideoState.js"],"names":["React","useState","useEffect","useRef","VideoContext","io","Peer","message","URL","socket","VideoState","children","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","chat","setChat","name","setName","call","setCall","me","setMe","userName","setUserName","otherUser","setOtherUser","myVdoStatus","setMyVdoStatus","userVdoStatus","setUserVdoStatus","myMicStatus","setMyMicStatus","userMicStatus","setUserMicStatus","msgRcv","setMsgRcv","screenShare","setScreenShare","myVideo","userVideo","connectionRef","screenTrackRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","localStorage","getItem","on","id","window","location","reload","type","currentMediaStatus","from","callerName","signal","isReceivingCall","msg","value","sender","setTimeout","answerCall","peer","initiator","trickle","data","emit","to","myMediaStatus","console","log","callUser","userToCall","signalData","updateVideo","currentStatus","getVideoTracks","enabled","updateMic","getAudioTracks","handleScreenSharing","error","getDisplayMedia","cursor","screenTrack","getTracks","replaceTrack","streams","find","track","kind","onended","catch","fullScreen","e","elem","target","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","leaveCall","destroy","leaveCall1","sendMsg","timestamp","Date","now"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport VideoContext from \"./VideoContext\";\r\nimport { io } from \"socket.io-client\"; //provide communication between client and server\r\nimport Peer from \"simple-peer\";\r\nimport { message } from \"antd\";\r\n\r\nconst URL = \"http://localhost:5000/\";\r\n//const URL = \"https://fathomless-tundra-67025.herokuapp.com/\";\r\n// const SERVER_URL = \"http://localhost:5000/\";\r\n\r\nexport const socket = io(URL);\r\n\r\nconst VideoState = ({ children }) => {\r\n  const [callAccepted, setCallAccepted] = useState(false);\r\n  const [callEnded, setCallEnded] = useState(false);\r\n  const [stream, setStream] = useState();\r\n  const [chat, setChat] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [call, setCall] = useState({});\r\n  const [me, setMe] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [otherUser, setOtherUser] = useState(\"\");\r\n  const [myVdoStatus, setMyVdoStatus] = useState(true);\r\n  const [userVdoStatus, setUserVdoStatus] = useState();\r\n  const [myMicStatus, setMyMicStatus] = useState(true);\r\n  const [userMicStatus, setUserMicStatus] = useState();\r\n  const [msgRcv, setMsgRcv] = useState(\"\");\r\n  const [screenShare, setScreenShare] = useState(false)\r\n\r\n  const myVideo = useRef();\r\n  const userVideo = useRef();\r\n  const connectionRef = useRef();\r\n  const screenTrackRef = useRef();\r\n\r\n  useEffect(() => {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: true, audio: true })\r\n      .then((currentStream) => {\r\n        setStream(currentStream);\r\n        myVideo.current.srcObject = currentStream;\r\n      });\r\n    if (localStorage.getItem(\"name\")) {\r\n      setName(localStorage.getItem(\"name\"));\r\n    }\r\n    socket.on(\"me\", (id) => setMe(id));\r\n    socket.on(\"endCall\", () => {\r\n      window.location.reload();\r\n    });\r\n\r\n    socket.on(\"updateUserMedia\", ({ type, currentMediaStatus }) => {\r\n      if (currentMediaStatus !== null || currentMediaStatus !== []) {\r\n        switch (type) {\r\n          case \"video\":\r\n            setUserVdoStatus(currentMediaStatus);\r\n            break;\r\n          case \"mic\":\r\n            setUserMicStatus(currentMediaStatus);\r\n            break;\r\n          default:\r\n            setUserMicStatus(currentMediaStatus[0]);\r\n            setUserVdoStatus(currentMediaStatus[1]);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"callUser\", ({ from, name: callerName, signal }) => {\r\n      setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n    });\r\n\r\n    socket.on(\"msgRcv\", ({ name, msg: value, sender }) => {\r\n      setMsgRcv({ value, sender });\r\n      setTimeout(() => {\r\n        setMsgRcv({});\r\n      }, 2000);\r\n    });\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(chat);\r\n  // }, [chat]);\r\n\r\n  const answerCall = () => {\r\n    setCallAccepted(true);\r\n    setOtherUser(call.from);\r\n    const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"answerCall\", {\r\n        signal: data,\r\n        to: call.from,\r\n        userName: name,\r\n        type: \"both\",\r\n        myMediaStatus: [myMicStatus, myVdoStatus],\r\n      });\r\n    });\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    peer.signal(call.signal);\r\n\r\n    connectionRef.current = peer;\r\n    console.log(connectionRef.current);\r\n  };\r\n\r\n  const callUser = (id) => {\r\n    const peer = new Peer({ initiator: true, trickle: false, stream });\r\n    setOtherUser(id);\r\n    peer.on(\"signal\", (data) => {\r\n      socket.emit(\"callUser\", {\r\n        userToCall: id,\r\n        signalData: data,\r\n        from: me,\r\n        name,\r\n      });\r\n    });\r\n\r\n    peer.on(\"stream\", (currentStream) => {\r\n      userVideo.current.srcObject = currentStream;\r\n    });\r\n\r\n    socket.on(\"callAccepted\", ({ signal, userName }) => {\r\n      setCallAccepted(true);\r\n      setUserName(userName);\r\n      peer.signal(signal);\r\n      socket.emit(\"updateMyMedia\", {\r\n        type: \"both\",\r\n        currentMediaStatus: [myMicStatus, myVdoStatus],\r\n      });\r\n    });\r\n\r\n    connectionRef.current = peer;\r\n    console.log(connectionRef.current);\r\n  };\r\n\r\n  const updateVideo = () => {\r\n    setMyVdoStatus((currentStatus) => {\r\n      socket.emit(\"updateMyMedia\", {\r\n        type: \"video\",\r\n        currentMediaStatus: !currentStatus,\r\n      });\r\n      stream.getVideoTracks()[0].enabled = !currentStatus;\r\n      return !currentStatus;\r\n    });\r\n  };\r\n\r\n  const updateMic = () => {\r\n    setMyMicStatus((currentStatus) => {\r\n      socket.emit(\"updateMyMedia\", {\r\n        type: \"mic\",\r\n        currentMediaStatus: !currentStatus,\r\n      });\r\n      stream.getAudioTracks()[0].enabled = !currentStatus;\r\n      return !currentStatus;\r\n    });\r\n  };\r\n\r\n\r\n  //Share screen function to let customer share the product they want to seller\r\n  const handleScreenSharing = () => {\r\n\r\n    if (!myVdoStatus) {\r\n      message.error(\"Turn on your video to share the content\", 2);\r\n      return;\r\n    }\r\n\r\n    if (!screenShare) {\r\n      navigator.mediaDevices\r\n        .getDisplayMedia({ cursor: true })\r\n        .then((currentStream) => {\r\n          const screenTrack = currentStream.getTracks()[0];\r\n\r\n\r\n          // replaceTrack (oldTrack, newTrack, oldStream);\r\n          connectionRef.current.replaceTrack(\r\n            connectionRef.current.streams[0]\r\n              .getTracks()\r\n              .find((track) => track.kind === 'video'),\r\n            screenTrack,\r\n            stream\r\n          );\r\n\r\n          // Listen click end\r\n          screenTrack.onended = () => {\r\n            connectionRef.current.replaceTrack(\r\n              screenTrack,\r\n              connectionRef.current.streams[0]\r\n                .getTracks()\r\n                .find((track) => track.kind === 'video'),\r\n              stream\r\n            );\r\n\r\n            myVideo.current.srcObject = stream;\r\n            setScreenShare(false);\r\n          };\r\n\r\n          myVideo.current.srcObject = currentStream;\r\n          screenTrackRef.current = screenTrack;\r\n          setScreenShare(true);\r\n        }).catch((error) => {\r\n          console.log(\"No stream for sharing\")\r\n        });\r\n    } else {\r\n      screenTrackRef.current.onended();\r\n    }\r\n  };\r\n\r\n  //full screen\r\n  const fullScreen = (e) => {\r\n    const elem = e.target;\r\n\r\n    if (elem.requestFullscreen) {\r\n      elem.requestFullscreen();\r\n    } else if (elem.mozRequestFullScreen) {\r\n      /* Firefox */\r\n      elem.mozRequestFullScreen();\r\n    } else if (elem.webkitRequestFullscreen) {\r\n      /* Chrome, Safari & Opera */\r\n      elem.webkitRequestFullscreen();\r\n    } else if (elem.msRequestFullscreen) {\r\n      /* IE/Edge */\r\n      elem.msRequestFullscreen();\r\n    }\r\n  };\r\n\r\n  const leaveCall = () => {\r\n    setCallEnded(true);\r\n\r\n    connectionRef.current.destroy();\r\n    socket.emit(\"endCall\", { id: otherUser });\r\n    window.location.reload();\r\n  };\r\n\r\n  const leaveCall1 = () => {\r\n    socket.emit(\"endCall\", { id: otherUser });\r\n  };\r\n  const sendMsg = (value) => {\r\n    socket.emit(\"msgUser\", { name, to: otherUser, msg: value, sender: name });\r\n    let msg = {};\r\n    msg.msg = value;\r\n    msg.type = \"sent\";\r\n    msg.timestamp = Date.now();\r\n    msg.sender = name;\r\n    setChat([...chat, msg]);\r\n  };\r\n\r\n  return (\r\n    <VideoContext.Provider\r\n      value={{\r\n        call,\r\n        callAccepted,\r\n        myVideo,\r\n        userVideo,\r\n        stream,\r\n        name,\r\n        setName,\r\n        callEnded,\r\n        me,\r\n        callUser,\r\n        leaveCall,\r\n        answerCall,\r\n        sendMsg,\r\n        msgRcv,\r\n        chat,\r\n        setChat,\r\n        setMsgRcv,\r\n        setOtherUser,\r\n        leaveCall1,\r\n        userName,\r\n        myVdoStatus,\r\n        setMyVdoStatus,\r\n        userVdoStatus,\r\n        setUserVdoStatus,\r\n        updateVideo,\r\n        myMicStatus,\r\n        userMicStatus,\r\n        updateMic,\r\n        screenShare,\r\n        handleScreenSharing,\r\n        fullScreen\r\n      }}\r\n    >\r\n      {children}\r\n    </VideoContext.Provider>\r\n  );\r\n};\r\n\r\nexport default VideoState;"]},"metadata":{},"sourceType":"module"}