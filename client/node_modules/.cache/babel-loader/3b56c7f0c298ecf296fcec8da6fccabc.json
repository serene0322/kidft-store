{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\react-course\\\\kidft-store\\\\client\\\\src\\\\components\\\\cart-dropdown\\\\cart-dropdown.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { withRouter } from \"react-router\";\nimport CustomButton from \"../custom-button/custom-button.component\";\nimport CartItem from \"../cart-item/cart-item.component\";\nimport { selectCartItems } from \"../../redux/cart/cart.selectors\";\nimport { toggleCart } from \"../../redux/cart/cart.actions\";\nimport './cart-dropdown.styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CartDropdown = _ref => {\n  let {\n    cartItems,\n    history,\n    dispatch\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cart-items\",\n      children: //if > 0\n      cartItems.length ? cartItems.map(cartItem => /*#__PURE__*/_jsxDEV(CartItem, {\n        item: cartItem\n      }, cartItem.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }, this)) //else\n      : /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"empty-message\",\n        children: \"Your cart is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n      onClick: () => {\n        history.push('/checkout');\n        dispatch(toggleCart());\n      },\n      children: \"GO TO CHECKOUT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}; //use the selectCartItems to make sure it not rerender whenever the state changes is unrelated to cart items\n\n\n_c = CartDropdown;\nconst mapStateToProps = createStructuredSelector({\n  cartItems: selectCartItems\n});\nexport default withRouter(connect(mapStateToProps)(CartDropdown));\n\nvar _c;\n\n$RefreshReg$(_c, \"CartDropdown\");","map":{"version":3,"sources":["C:/Users/user/Desktop/react-course/kidft-store/client/src/components/cart-dropdown/cart-dropdown.component.jsx"],"names":["React","connect","createStructuredSelector","withRouter","CustomButton","CartItem","selectCartItems","toggleCart","CartDropdown","cartItems","history","dispatch","length","map","cartItem","id","push","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,UAAT,QAA2B,+BAA3B;AAEA,OAAO,6BAAP;;;AAEA,MAAMC,YAAY,GAAG;AAAA,MAAC;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA;AAAtB,GAAD;AAAA,sBACjB;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,gBAEQ;AACAF,MAAAA,SAAS,CAACG,MAAV,GACIH,SAAS,CAACI,GAAV,CAAcC,QAAQ,iBAClB,QAAC,QAAD;AAA4B,QAAA,IAAI,EAAEA;AAAlC,SAAeA,QAAQ,CAACC,EAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,CAII;AAJJ,qBAMI;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAcI,QAAC,YAAD;AAAc,MAAA,OAAO,EAAE,MAAM;AACzBL,QAAAA,OAAO,CAACM,IAAR,CAAa,WAAb;AACAL,QAAAA,QAAQ,CAACJ,UAAU,EAAX,CAAR;AACH,OAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADiB;AAAA,CAArB,C,CAwBA;;;KAxBMC,Y;AAyBN,MAAMS,eAAe,GAAGf,wBAAwB,CAAC;AAC7CO,EAAAA,SAAS,EAAEH;AADkC,CAAD,CAAhD;AAIA,eAAeH,UAAU,CAACF,OAAO,CAACgB,eAAD,CAAP,CAAyBT,YAAzB,CAAD,CAAzB","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport CustomButton from \"../custom-button/custom-button.component\";\r\nimport CartItem from \"../cart-item/cart-item.component\";\r\nimport { selectCartItems } from \"../../redux/cart/cart.selectors\";\r\nimport { toggleCart } from \"../../redux/cart/cart.actions\";\r\n\r\nimport './cart-dropdown.styles.scss';\r\n\r\nconst CartDropdown = ({ cartItems, history, dispatch }) => (\r\n    <div className='cart-dropdown'>\r\n        <div className='cart-items'>\r\n            {\r\n                //if > 0\r\n                cartItems.length ? (\r\n                    cartItems.map(cartItem => (\r\n                        <CartItem key={cartItem.id} item={cartItem} />\r\n                    ))\r\n                    //else\r\n                ) : (\r\n                    <span className='empty-message'>Your cart is empty.</span>\r\n                )\r\n            }\r\n        </div>\r\n        <CustomButton onClick={() => {\r\n            history.push('/checkout');\r\n            dispatch(toggleCart());\r\n        }}>\r\n            GO TO CHECKOUT\r\n        </CustomButton>\r\n    </div>\r\n);\r\n\r\n//use the selectCartItems to make sure it not rerender whenever the state changes is unrelated to cart items\r\nconst mapStateToProps = createStructuredSelector({\r\n    cartItems: selectCartItems\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps)(CartDropdown));\r\n\r\n"]},"metadata":{},"sourceType":"module"}