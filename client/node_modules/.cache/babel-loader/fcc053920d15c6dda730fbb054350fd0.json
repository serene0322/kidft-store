{"ast":null,"code":"//allow us to keep our files clean and organize functions that we may need in multiple files in one location\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id); //if exist, return a new array (new version of state) so can re-render\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => //if same item, create a new object which will have the cart item and quantity + 1\n    cartItem.id === cartItemToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } //else of not match, just return the original cart item\n    : cartItem);\n  } //if the cart item is not found inside array, return a new array with all existing cart items that already there\n\n\n  return [...cartItems, { ...cartItemToAdd,\n    quantity: 1\n  }];\n};\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); //remove the item from cart if it is the last item\n\n  if (existingCartItem.quantity === 1) {\n    //if the id not the one need remove, keep the item\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } //if quantity is not 1 and we know there is existing cart item\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/react-course/kidft-store/src/redux/cart/cart.utils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existingCartItem","find","cartItem","id","map","quantity","removeItemFromCart","cartItemToRemove","filter"],"mappings":"AAAA;AAEA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,aAAZ,KAA8B;AACvD,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EADrB,CAAzB,CADuD,CAKvD;;AACA,MAAIH,gBAAJ,EAAsB;AAClB,WAAOF,SAAS,CAACM,GAAV,CAAcF,QAAQ,IACzB;AACAA,IAAAA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAA9B,GACM,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KADN,CAEI;AAFJ,MAGMH,QALH,CAAP;AAOH,GAdsD,CAevD;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,aAAL;AAAoBM,IAAAA,QAAQ,EAAE;AAA9B,GAAf,CAAP;AACH,CAjBM;AAmBP,OAAO,MAAMC,kBAAkB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAC/D,QAAMP,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACrBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADxB,CAAzB,CAD+D,CAK/D;;AACA,MAAIH,gBAAgB,CAACK,QAAjB,KAA8B,CAAlC,EAAqC;AACjC;AACA,WAAOP,SAAS,CAACU,MAAV,CAAiBN,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAA9D,CAAP;AACH,GAT8D,CAW/D;;;AACA,SAAOL,SAAS,CAACM,GAAV,CACHF,QAAQ,IACJA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EAAjC,GACI,EAAE,GAAGD,QAAL;AAAeG,IAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,GADJ,GAEMH,QAJP,CAAP;AAMH,CAlBM","sourcesContent":["//allow us to keep our files clean and organize functions that we may need in multiple files in one location\r\n\r\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\r\n    const existingCartItem = cartItems.find(\r\n        cartItem => cartItem.id === cartItemToAdd.id\r\n    );\r\n\r\n    //if exist, return a new array (new version of state) so can re-render\r\n    if (existingCartItem) {\r\n        return cartItems.map(cartItem =>\r\n            //if same item, create a new object which will have the cart item and quantity + 1\r\n            cartItem.id === cartItemToAdd.id\r\n                ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n                //else of not match, just return the original cart item\r\n                : cartItem\r\n        )\r\n    }\r\n    //if the cart item is not found inside array, return a new array with all existing cart items that already there\r\n    return [...cartItems, { ...cartItemToAdd, quantity: 1 }]\r\n};\r\n\r\nexport const removeItemFromCart = (cartItems, cartItemToRemove) => {\r\n    const existingCartItem = cartItems.find(\r\n        cartItem => cartItem.id === cartItemToRemove.id\r\n    );\r\n    \r\n    //remove the item from cart if it is the last item\r\n    if (existingCartItem.quantity === 1) {\r\n        //if the id not the one need remove, keep the item\r\n        return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id)\r\n    }\r\n\r\n    //if quantity is not 1 and we know there is existing cart item\r\n    return cartItems.map(\r\n        cartItem =>\r\n            cartItem.id === cartItemToRemove.id ?\r\n                { ...cartItem, quantity: cartItem.quantity - 1 }\r\n                : cartItem\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}